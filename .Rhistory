FV<-(PV*((1+r^n)))
FV<-(presentvalue*((1+r^n)))
FV<-function(presentvalue, r, n){
FV<-(presentvalue*((1+r^n)))
}
FV<-function(PV, r, n){
FV<-(PV*((1+r^n)))
}
ans<-FV(100,.01,3)
FV<-function(PV, r, n){
FV<-(PV*((1+r)^n))
}
ans<-FV(100,.01,3)
PV<-function(FV, r, n){
PV<-(FV/((1+r)^n))
}
ans<-(1000,.1,10)
ans<-PV(1000,.1,10)
APV<-function(A,r,n){
APV<-(A*(((1+r)^n)-1)/(r*((1+r)^n)))
}
ans<-APV(24000,.03,30)
PVA<-function(A,r,n){
PVA<-(A*(((1+r)^n)-1)/(r*((1+r)^n)))
}
APV<-function(PV,r,n){
APV<-(PV*((r*((1+r)^n))/((1+r)^n)-1))
}
ans<-APV(1000000,.07,20)
APV<-function(PV,r,n){
APV<-(PV*((r*((1+r)^n))/(((1+r)^n)-1)))
}
ans<-APV(1000000,.07,20)
PVP<-function(PV,A,r){
PVP<-A/r
}
PVG<-function(A,n,g,r){
PVG<-((A/(r-g))*(1-((1+g)/(1+r))^n))
}
ans<-APV(100,3,.1,.05)
ans<-PVG(100,3,.1,.05)
real<-function(nom,base,current){
real<-(nom*(base/current))
}
ans<-real(100,218.056,201.6)
ans<-FV(100,.05,6)
ans<-FV(21321,.08,50)
ans
summary(ans)
ans<-PV(162.9,.05,10)
ans<-PV(600,.15,9)
ans<-APV(1000000,.07,15)
ans<-APV(200000,.05,30)
ans<-APV(200000,.05,30)
ans<-PVA(100,.05,5)
ans<-PVA(450,.06,15)
ans<-PVA(500,.00666667,360)
ans<-PV(600,.0815,10)
PVA<-function(A,r,n){
PVA<-(A*(((1+r)^n)-1)/(r*((1+r)^n)))
}
ans<-PVA(100.05,5)
ans<-PVA(100,.05,5)
ans<-PVA(500,.006667,360)
ans<-PVA(500,.00666667,360)
ans<-PVA(500,.006667,360)
ans<-PVA(500,.00666666667,360)
#Present value of an annuity
PVA<-function(A,r,n){
PVA<-(A*(((1+r)^n)-1)/(r*((1+r)^n)))
}
#Present value of an annuity growing at a proportionate rate
PVG<-function(A,n,g,r){
PVG<-((A/(r-g))*(1-((1+g)/(1+r))^n))
}
#Nominal Discount Rate
d<-function(real,inflation){
d<-real+inflation+(real*inflation)
}
d<-.015+.06+(.015*.06)
P_Val_Ben<-PVG(180000,20,-.02,d)
P_Val_LAbor<-(PVA(40000,d,5)+PVG(40000,15,.03,d))
PV<-function(FV, r, n){
PV<-(FV/((1+r)^n))
}
first5lab<-PVA(40000,d,5)
second15lab<-PVG(40000,15,.03,d)
discSecond15<-PV(second15lab,d,5)
P_Val_Labor<-first5lab+discSecond15
rm(list=ls())
#library(gdata)
A<-read.csv("I:/541 - BCA/Valuation/AllSales_wNoMSA.csv")
attach(A)
rm(list=ls())
#library(gdata)
A<-read.csv("I:\\541 - BCA/Valuation\\AllSales_wNoMSA.csv")
attach(A)
A<-read.csv("I:\\541 - BC\\Valuation\\AllSales_wNoMSA.csv")
rm(list=ls())
MyData<-read.csv("Home/Box Sync/541 - BCA/Valuation/SurveyData.csv")
presponse<-aggregate(MyData$YES, by=list(MyData$Q), FUN="mean")
plot(presponse$Group.1, presponse$x, xlab="$ Ask", ylab="Share 'Yes'",type="l")
rm(list=ls())
#library(gdata)
A<-read.csv("I:\\541 - BCA\\Valuation\\AllSales_wNoMSA.csv")
attach(A)
rm(list=ls())
#library(gdata)
A<-read.csv("/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/AllSales_wNoMSA.csv")
attach(A)
rm(list=ls())
#library(gdata)
A<-read.csv("/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/AllSales_wNoMSA.csv")
attach(A)
n<-nrow(A)
lnEmissions<-log(totair_cbg+1)
lnIncome <- log(Mediany_cbg)
#run the regression
results<-lm(lnhprice ~ lnyardsize+lnEmissions+lnIncome+age100+onestory+air+fire+deck)
summary(results)
#Save the point estimate beta on lnEmissions
betas<-coefficients(results)[3]
str(summary(results)$coef)
#Save the standard errors, which can be found by taking the square root of the diagonal elements
#of the variance covariance matrix that is saved in the results.
se<-sqrt(diag(vcov(results)))[3]
#Calculate impacts for Table 1
mean_hp=98900   #Paradise's median house price
#start with household wtp
chg=(-1)
HH_1_PE <- (chg)*betas*mean_hp
HH_1_low <- (chg)*(betas+2*se)*mean_hp
HH_1_up <- (chg)*(betas-2*se)*mean_hp
chg=(-140/300)*100   #Zip's impact on emissions
HH_ZIP_PE <- (chg)*betas*mean_hp
HH_ZIP_low <- (chg)*(betas+2*se)*mean_hp
HH_ZIP_up <- (chg)*(betas-2*se)*mean_hp
#aggregate WTP
hh=1112 #paradise's number of households
Agg_1_PE <- HH_1_PE*hh
Agg_1_low <- HH_1_low*hh
Agg_1_up <- HH_1_up*hh
Agg_ZIP_PE <- HH_ZIP_PE*hh
Agg_ZIP_low <- HH_ZIP_low*hh
Agg_ZIP_up <- HH_ZIP_up*hh
#store results and export to a table
c1<-c(HH_1_low,HH_ZIP_low,Agg_1_low,Agg_ZIP_low)
c2<-c(HH_1_PE,HH_ZIP_PE,Agg_1_PE,Agg_ZIP_PE)
c3<-c(HH_1_up,HH_ZIP_up,Agg_1_up,Agg_ZIP_up)
Table1<-cbind(c1,c2,c3)
write.csv(Table1,file="/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/Table1_results.csv", sep = "")
rm(list=ls())
MyData<-read.csv("/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/SurveyData.csv")
presponse<-aggregate(MyData$YES, by=list(MyData$Q), FUN="mean")
plot(presponse$Group.1, presponse$x, xlab="$ Ask", ylab="Share 'Yes'",type="l")
myprobit <-glm(YES ~ Q, family=binomial(link="probit"), data=MyData)
summary(myprobit)
b0<-coefficients(myprobit)[1]
b1<-coefficients(myprobit)[2]
WTP<-(-b0/b1)
rm(list=ls())
#library(gdata)
A<-read.csv("/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/AllSales_wNoMSA.csv")
attach(A)
#attach command means you don't have to tell R what data to use for procedures going forward
n<-nrow(A)
lnEmissions<-log(totair_cbg+1)
lnIncome <- log(Mediany_cbg)
#run the regression
results<-lm(lnhprice ~ lnyardsize+lnEmissions+lnIncome+age100+onestory+air+fire+deck)
summary(results)
#Save the point estimate beta on lnEmissions
betas<-coefficients(results)[3]
str(summary(results)$coef)
#Save the standard errors, which can be found by taking the square root of the diagonal elements
#of the variance covariance matrix that is saved in the results.
se<-sqrt(diag(vcov(results)))[3]
#Calculate impacts for Table 1
mean_hp=98900   #Paradise's median house price
#start with household wtp
chg=(-1)
HH_1_PE <- (chg)*betas*mean_hp
HH_1_low <- (chg)*(betas+2*se)*mean_hp
HH_1_up <- (chg)*(betas-2*se)*mean_hp
chg=(-140/300)*100   #Zip's impact on emissions
HH_ZIP_PE <- (chg)*betas*mean_hp
HH_ZIP_low <- (chg)*(betas+2*se)*mean_hp
HH_ZIP_up <- (chg)*(betas-2*se)*mean_hp
#aggregate WTP
hh=1112 #paradise's number of households
Agg_1_PE <- HH_1_PE*hh
Agg_1_low <- HH_1_low*hh
Agg_1_up <- HH_1_up*hh
Agg_ZIP_PE <- HH_ZIP_PE*hh
Agg_ZIP_low <- HH_ZIP_low*hh
Agg_ZIP_up <- HH_ZIP_up*hh
#store results and export to a table
c1<-c(HH_1_low,HH_ZIP_low,Agg_1_low,Agg_ZIP_low)
c2<-c(HH_1_PE,HH_ZIP_PE,Agg_1_PE,Agg_ZIP_PE)
c3<-c(HH_1_up,HH_ZIP_up,Agg_1_up,Agg_ZIP_up)
Table1<-cbind(c1,c2,c3)
write.csv(Table1,file="/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/Table1_results.csv", sep = "")
rm(list=ls())
MyData<-read.csv("/Users/rlwinecoff/Box Sync/541 - BCA/Valuation/SurveyData.csv")
presponse<-aggregate(MyData$YES, by=list(MyData$Q), FUN="mean")
plot(presponse$Group.1, presponse$x, xlab="$ Ask", ylab="Share 'Yes'",type="l")
myprobit <-glm(YES ~ Q, family=binomial(link="probit"), data=MyData)
summary(myprobit)
b0<-coefficients(myprobit)[1]
b1<-coefficients(myprobit)[2]
WTP<-(-b0/b1)
#Input Phase
ntrials=1000 #number of trials
d=.05 #discount rate
basecross=50000 #baseline crossings
baseferryp=0.5 #baseline
toll <- seq(0.5,0,-0.01); #Generate a sequence of numbers from $0.50 to $0 in one-penny increments.
Qd <- 150000-200000*toll; #Calculate the demand for the total number of crossings.
const=500000*d #annualized construction costs
maintm=15000 #average mainenance and operations costs
maintsd=100 #standard deviation of maintenance and oeprations costs
ferrymc=0.4
maint <- rnorm(ntrials,mean=maintm,sd=maintsd)
hist(maint)
#Calculate change in total benefit by converting demand curve to marginal benefit function
TB <- ((150000/200000)*Qd-(1/200000)*(1/2)*(Qd^2)) - ((150000/200000)*50000-(1/200000)*(1/2)*(50000^2))
#Saved Ferry Operations Costs (SFOC) ...Assume Ferry Shuts down if toll falls below $0.40, but for tolls above that
#it price matches and splits total demand 50/50 with the Ferry.
if(toll>=.4){SFOC=20000-.4*(Qd*.5)}else{SFOC=20000}
#Net Benefit Calculation
NB <-TB + SFOC - maint - const
NB <- TB + SFOC - 40000
#Input Phase
ntrials=1000 #number of trials
d=.05 #discount rate
basecross=50000 #baseline crossings
baseferryp=0.5 #baseline
toll <- .25
Qd <- 150000-200000*toll; #Calculate the demand for the total number of crossings.
const=500000*d #annualized construction costs
maintm=15000 #average mainenance and operations costs
maintsd=100 #standard deviation of maintenance and oeprations costs
ferrymc=0.4
maint <- rnorm(ntrials,mean=maintm,sd=maintsd)
hist(maint)
#Calculate change in total benefit by converting demand curve to marginal benefit function
TB <- ((150000/200000)*Qd-(1/200000)*(1/2)*(Qd^2)) - ((150000/200000)*50000-(1/200000)*(1/2)*(50000^2))
#Saved Ferry Operations Costs (SFOC) ...Assume Ferry Shuts down if toll falls below $0.40, but for tolls above that
#it price matches and splits total demand 50/50 with the Ferry.
if(toll>=.4){SFOC=20000-.4*(Qd*.5)}else{SFOC=20000}
#Net Benefit Calculation
NB <-TB + SFOC - maint - const
mean(NB)
sd(NB)
min(NB)
max(NB)
#Plot Net Benefits
hist(NB)
x <- 3
x
y <- 2
y > x
?round
install.packages("stringr")
installed.packages()
installed.packages("stringr")
library("stringr")
installed.packages("stringr")
str_count("Mississippi", "i")
stringr::str_count("Mississippi", "i")
first_name <- "Ruth"
last_name <- "Winecoff"
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
}
print(make_full_name(first_name, last_name))
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
full_name
}
make_full_name(first_name, last_name)
View(make_full_name)
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
}
make_full_name(first_name, last_name)
loopvalues <- 1:10
print(loopvalues)
?is.vector
is.vector(18)
is.vector(first_name, mode = "logical")
print(loopvalues[1, 2, 5])
print(loopvalues[c(1, 2, 5)])
loopvalues <- seq(1, 10, 2)
print(loopvalues[c(1, 2, 5)])
print(loopvalues[loopvalues < 7])
prices <- c(2, 5, 6)
prices[4] <- 42
print(prices)
getwd
getwd()
setwd("Userss/rlwinecoff/gitted/learning_R")
setwd("Users/rlwinecoff/gitted/learning_R")
getwd()
setwd("~/gitted/learning_R")
getwd()
setwd("/Users/rlwinecoff/gitted/learning_R")
new_frame <- read.csv("toy.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("~")
setwd("~/gitted/learning_R")
install.packages("lintr")
library("lintr") # To use: lint("filename.R")
# Apply suggested formatting to code
install.packages("stylerb")
library("stylerb") # To use: style_file("filename.R")
install.packages("styler")
library("styler") # To use: style_file("filename.R")
install.packages(dplyr)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("tidyverse")
library("tidyverse")
remove.packages("dplyr")
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
install.packages("pscl")
library(pscl)
view(pscl)
view(presidentialElections)
select(presidentialElections, year, demVote)
votes <- select(presidentialElections, year, demVote)
view(votes)
votes <- mutate(presidentialElections, other_parties_vote)
view presidentialElections
view(presidentialElections)
votes <- mutate(presidentialElections, south)
view(votes)
?dplyr
browseVignettes(package = "dplyr")
votes <- mutate(presidentialElections, other_parties_vote = 100 - demVote)
averagevotes <- summarize(mean_dem_vote = mean(demVote), mean_other_parties = mean(other_parties_vote))
averagevotes <- summarize(mean_dem_vote = mean(demVotes), mean_other_parties = mean(other_parties_vote))
averagevotes <- summarize(votes, mean_dem_vote = mean(demVotes), mean_other_parties = mean(other_parties_vote))
averagevotes <- summarize(votes, mean_dem_vote = mean(demVote), mean_other_parties = mean(other_parties_vote))
view(averagevotes)
is.data.frame(averagevotes)
group_by(state) %>%
summarize(mean_dem_vote = mean(demVote))
group_by(votes, state) %>%
summarize(mean_dem_vote = mean(demVote))
group_by(votes, state) %>%
votesbystate <- summarize(mean_dem_vote = mean(demVote))
View(votes)
